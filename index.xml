<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Focus-ChrisHRZ&#39;s blog</title>
    <link>https://chrishrz.github.io/</link>
    <description>Recent content on Focus-ChrisHRZ&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 May 2020 12:13:41 +0800</lastBuildDate>
    
	<atom:link href="https://chrishrz.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Lc]面试题10_II青蛙跳台阶问题</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9810_ii%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 May 2020 12:13:41 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9810_ii%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</guid>
      <description>题目 题解 这题与70题一样，详见70题题解，因为要取模，因此通项公式法无法通过，递推公式法也太慢通过不了，其分析详见70题题解，这里贴一个递推</description>
    </item>
    
    <item>
      <title>[Lc]509斐波那契数</title>
      <link>https://chrishrz.github.io/post/lc509%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</link>
      <pubDate>Mon, 11 May 2020 11:23:15 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc509%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</guid>
      <description>题目 题解 这题和爬楼梯是一样的，这题与剑指offer10一样，三种方法 1. 递归 这个方法最慢，因为有大量的重复运算，写法最简单，就不写了 时间复杂度</description>
    </item>
    
    <item>
      <title>[Lc]面试题10_I斐波那契数列</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9810_i%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</link>
      <pubDate>Mon, 11 May 2020 11:20:02 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9810_i%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</guid>
      <description>题目 题解 这题与[lc]509一样，区别在于结果需要取余，而对于最终结果取余和对于每一位取余再计算下一个数字答案是一样的。具体分析见(http</description>
    </item>
    
    <item>
      <title>[Lc]面试题09用两个栈实现队列</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9809%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 10 May 2020 20:54:36 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9809%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid>
      <description>题目 题解 腾讯的客户端开发就是面的这个。。。，当时还想了半天幸苦想出来了，可惜还是凉 //Your CQueue object will be instantiated and called as such: CQueue* obj = new CQueue(); bj-&amp;gt;appendTail(value); int param_2 = obj-&amp;gt;deleteHead(); 1. 快存慢取 这个方法</description>
    </item>
    
    <item>
      <title>[Lc]105从前序与中序遍历序列构造二叉树</title>
      <link>https://chrishrz.github.io/post/lc105%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 10 May 2020 19:54:38 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc105%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>题解 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 递归，先序的首字母是根节点，而中序的根节点区分左右子树，利用这个性质递</description>
    </item>
    
    <item>
      <title>[Lc]面试题07重建二叉树</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9807%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 10 May 2020 19:49:19 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9807%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>题目 注意：本题与主站 105 题重复：(https://leetcode-cn.com/problems/construct-binary-tree</description>
    </item>
    
    <item>
      <title>[Lc]面试题06从尾到头打印链表</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9806%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 10 May 2020 17:46:46 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9806%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</guid>
      <description>题目 题解 //Definition for singly-linked list. struct ListNode { int val; ListNode *next; ListNode(int x) : val(x), next(NULL) {} }; 1. 栈 从头到尾遍历链表，先取数入栈，再从栈中弹出放入数组 时间复杂度$O(n)$，遍历一次数组一次栈</description>
    </item>
    
    <item>
      <title>[Lc]面试题05替换空格</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9805%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Sat, 09 May 2020 22:03:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9805%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</guid>
      <description>题目 题解 1. 双指针法 先统计空格个数，然后扩容，然后用双指针挨个从前往后复制数据，不需要额外空间 时间复杂度$O(n)$,遍历两遍 空间复杂度$O(</description>
    </item>
    
    <item>
      <title>[Lc]74搜索二维矩阵</title>
      <link>https://chrishrz.github.io/post/lc74%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Sat, 09 May 2020 21:27:34 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc74%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/</guid>
      <description>题目 题解 稍微变形的二分查找，其实写法是一样的，主要就是在取mid的时候需要转化一下，开始取二分查找最初的left和right也要注意，还有二</description>
    </item>
    
    <item>
      <title>[Lc]240搜索二维矩阵II</title>
      <link>https://chrishrz.github.io/post/lc240%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5ii/</link>
      <pubDate>Sat, 09 May 2020 21:12:12 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc240%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5ii/</guid>
      <description>题目 题解 可以一行一行的二分查找，但是比较慢，也没有利用这道题矩阵的性质 确定起点很重要，由于这道题矩阵的特殊形式，我们可以将起点定在右上（或者</description>
    </item>
    
    <item>
      <title>[Lc]面试题04二维数组中的查找</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9804%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sat, 09 May 2020 21:06:19 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9804%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <description>题目 240题 题解 可以一行一行的二分查找，但是比较慢，也没有利用这道题矩阵的性质 确定起点很重要，由于这道题矩阵的特殊形式，我们可以将起点定在右</description>
    </item>
    
    <item>
      <title>[Lc]面试题03数组中重复的数字</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9803%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sat, 09 May 2020 17:53:52 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9803%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>题目 题解 1. 排序法（改变输入数组） 数组排序后找重复项 时间复杂度$O(nlog{n})$，主要是排序花费的 空间复杂度$O(1)$ class Solution {//三种方</description>
    </item>
    
    <item>
      <title>[Lc]70爬楼梯</title>
      <link>https://chrishrz.github.io/post/lc70%E7%88%AC%E6%A5%BC%E6%A2%AF/</link>
      <pubDate>Sat, 09 May 2020 13:27:32 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc70%E7%88%AC%E6%A5%BC%E6%A2%AF/</guid>
      <description>题目 题解 1. 动态规划（斐波那契数列递推公式） 其实就是斐波那契数列，可以用递推公式和通项公式求解 递推相当于动态规划，但是只和前两个数有关，所以不</description>
    </item>
    
    <item>
      <title>[Lc]204计数质数</title>
      <link>https://chrishrz.github.io/post/lc204%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/</link>
      <pubDate>Sat, 09 May 2020 11:34:43 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc204%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/</guid>
      <description>题目 题解 1. 暴力法 直接用暴力法会超时，时间复杂度$O(n^{2})$，因此使用暴力法要进行优化，即isPrime()函数只用遍历到sqrt(N</description>
    </item>
    
    <item>
      <title>[Lc]141环形链表</title>
      <link>https://chrishrz.github.io/post/lc141%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 08 May 2020 21:12:47 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc141%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</guid>
      <description>题目 链表定义： //Definition for singly-linked list. struct ListNode { int val; ListNode *next; ListNode(int x) : val(x), next(NULL) {} }; 题解 142的简化版，202的方法来源 1. 快慢指针法 时间复杂度$O(n)$ 空间复杂度$O(1)</description>
    </item>
    
    <item>
      <title>[Lc]202快乐数</title>
      <link>https://chrishrz.github.io/post/lc202%E5%BF%AB%E4%B9%90%E6%95%B0/</link>
      <pubDate>Fri, 08 May 2020 21:08:54 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc202%E5%BF%AB%E4%B9%90%E6%95%B0/</guid>
      <description>题目 题解 这题相当于142题的一个变形，相当于链表找环，但是不用找到起始点，判断是环就可以（这么说应该是141题） 1. set存值法 时间复杂度$O</description>
    </item>
    
    <item>
      <title>[Lc]142环形链表II</title>
      <link>https://chrishrz.github.io/post/lc142%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8ii/</link>
      <pubDate>Fri, 08 May 2020 20:48:24 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc142%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8ii/</guid>
      <description>题目 链表定义： //Definition for singly-linked list. struct ListNode { int val; ListNode *next; ListNode(int x) : val(x), next(NULL) {} }; 题解 141的进阶 1. 快慢指针法 设环长度为c，环前端长度为a，相遇点到环前端长度为y 快指针在一</description>
    </item>
    
    <item>
      <title>[Lc]172阶乘后的零</title>
      <link>https://chrishrz.github.io/post/lc172%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</link>
      <pubDate>Fri, 08 May 2020 17:33:58 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc172%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</guid>
      <description>题目 题解 这道题代码不难，关键是数学归纳。 如果把阶乘算出来再求0一定会超时，时间复杂度$O(n)$，pass。 这道题的关键是找2和5的个数，只</description>
    </item>
    
    <item>
      <title>[Lc]171Excel表列序号</title>
      <link>https://chrishrz.github.io/post/lc171excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/</link>
      <pubDate>Fri, 08 May 2020 17:08:51 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc171excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/</guid>
      <description>题目 题解 和168正好相反嘛 这题就简单多了，挨个取字母变成数字就可以了，注意有： 每次是乘26 每次要+1，和168的原因一样，这个是伪26进制，</description>
    </item>
    
    <item>
      <title>[Lc]168Excel表列名称</title>
      <link>https://chrishrz.github.io/post/lc168excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</link>
      <pubDate>Fri, 08 May 2020 16:07:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc168excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</guid>
      <description>题目 题解 和171相反的一个题嘛，这个稍微难一点。 这道题就是十进制转26进制，但是有一些需要注意的问题 首先不能从前往后插入数字，即先放最大位，</description>
    </item>
    
    <item>
      <title>[Lc]166分数到小数</title>
      <link>https://chrishrz.github.io/post/lc166%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/</link>
      <pubDate>Fri, 08 May 2020 12:30:44 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc166%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/</guid>
      <description>题目 题解 这道题其实就是模拟笔算除法的过程，挨个位产生商，主要判断是否除尽或者产生了循环。 class Solution { public: string fractionToDecimal(int numerator, int denominator) { string res; if(numerator==0) return &amp;quot;0&amp;quot;; //用异或判断是否为负</description>
    </item>
    
    <item>
      <title>[Lc]165比较版本号</title>
      <link>https://chrishrz.github.io/post/lc165%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</link>
      <pubDate>Thu, 07 May 2020 20:25:09 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc165%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</guid>
      <description>题目 题解 1. stringstream法 用stringstream和getline切割字符串，并挨个比较，本来想用getline的，但是这样wh</description>
    </item>
    
    <item>
      <title>[Lc]151翻转字符串里的单词</title>
      <link>https://chrishrz.github.io/post/lc151%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Thu, 07 May 2020 19:33:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc151%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/</guid>
      <description>题目 题解 1. 双旋转单擦除法 题目要求空间复杂度$O(1)$，该方法符合，即先整体翻转全部字符串，再逐个单词串翻转，空格跳过，不同单词之间的空格自</description>
    </item>
    
    <item>
      <title>Cpp字符串转数字总结</title>
      <link>https://chrishrz.github.io/post/cpp%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 07 May 2020 17:11:15 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/cpp%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97%E6%80%BB%E7%BB%93/</guid>
      <description>c语言转换形式 string str; int i = atoi(str.c_str());//string转int float f = atof(str.c_str());//strin</description>
    </item>
    
    <item>
      <title>[Lc]93复原IP地址</title>
      <link>https://chrishrz.github.io/post/lc93%E5%A4%8D%E5%8E%9Fip%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Thu, 07 May 2020 12:46:45 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc93%E5%A4%8D%E5%8E%9Fip%E5%9C%B0%E5%9D%80/</guid>
      <description>题目 题解 这道题主要是递归然后剪枝，符合条件的放入结果，不符合就键值，主要是要确定几种不符合条件的情况 剩下的数字不够分的，比如还有2个数，但是</description>
    </item>
    
    <item>
      <title>[Lc]91解码方法</title>
      <link>https://chrishrz.github.io/post/lc91%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 07 May 2020 11:13:52 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc91%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/</guid>
      <description>题目 题解 这道题也是dp，但是不用数组保存过去的状态，经过分析讨论当前状态只与前两个状态有关，所以只用存前两个状态即可，共有四种情况，详解见I</description>
    </item>
    
    <item>
      <title>[Lc]125验证回文串</title>
      <link>https://chrishrz.github.io/post/lc125%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</link>
      <pubDate>Wed, 06 May 2020 21:55:59 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc125%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</guid>
      <description>题目 题解 双指针，挨个比较，注意的是跳过非数字字母，还有大写字母要转化成小写 时间复杂度$O(n)$ 空间复杂度$O(1)$ 七个重要的c++内置函</description>
    </item>
    
    <item>
      <title>[Lc]87扰乱字符串</title>
      <link>https://chrishrz.github.io/post/lc87%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 06 May 2020 16:47:56 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc87%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>题目 题解 1. 递归法 就是通过递归左右子串，首先判断长度是否相等，不相等直接false；然后判断是否完全一样，一样直接true；然后判断排序后是否</description>
    </item>
    
    <item>
      <title>[Lc]72编辑距离</title>
      <link>https://chrishrz.github.io/post/lc72%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Wed, 06 May 2020 13:18:11 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc72%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/</guid>
      <description>题目 题解 时间复杂度$O(mn)$ 空间复杂度$O(mn)$，都是搞dp数组用的 class Solution { public: int minDistance(string word1, string word2) { int n=word1.size(), m=word2.size(); if(n*m==0) return n+m;//若一个为空，返回另一个</description>
    </item>
    
    <item>
      <title>[Lc]68文本左右对齐</title>
      <link>https://chrishrz.github.io/post/lc68%E6%96%87%E6%9C%AC%E5%B7%A6%E5%8F%B3%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Wed, 06 May 2020 11:28:45 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc68%E6%96%87%E6%9C%AC%E5%B7%A6%E5%8F%B3%E5%AF%B9%E9%BD%90/</guid>
      <description>题目 题解 时间复杂度$O(N)$ 空间复杂度$O(maxWidth+N)$，用于暂存每行的结果和存结果 class Solution { public: vector&amp;lt;string&amp;gt; fullJustify(vector&amp;lt;string&amp;gt;&amp;amp; words, int maxWidth) { vector&amp;lt;string&amp;gt; res; if(words.empty()) return res; int left = 0;/</description>
    </item>
    
    <item>
      <title>[Lc]71简化路径</title>
      <link>https://chrishrz.github.io/post/lc71%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 06 May 2020 10:22:56 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc71%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/</guid>
      <description>题目 题解 时间复杂度$O(N)$，遍历path 空间复杂度$O(N)$，两个n，t暂存路径，res存结果 class Solution { public: string simplifyPath(string path) { string res, tmp; if(path.empty()) return res;//特</description>
    </item>
    
    <item>
      <title>[Lc]58最后一个单词的长度</title>
      <link>https://chrishrz.github.io/post/lc58%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Tue, 05 May 2020 21:43:53 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc58%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</guid>
      <description>题目 题解 时间复杂度$O(k)$, k为最后一个单词的长度。 空间复杂度$O(1)$ 从后往前遍历，开始的0全部跳过，然后计数，再次遇到0跳出循环 class</description>
    </item>
    
    <item>
      <title>MinGW使用to_string报错解决</title>
      <link>https://chrishrz.github.io/post/mingw%E4%BD%BF%E7%94%A8to_string%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Tue, 05 May 2020 18:31:02 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/mingw%E4%BD%BF%E7%94%A8to_string%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</guid>
      <description>在做leetcode49题时发现的错误，我是用clion对程序进行调试，报错，调试后发现是mingw中to_string的一个bug，在网上</description>
    </item>
    
    <item>
      <title>[Lc]49字母异位词分组</title>
      <link>https://chrishrz.github.io/post/lc49%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</link>
      <pubDate>Tue, 05 May 2020 12:59:21 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc49%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</guid>
      <description>题目 题解 1. unordered_map排序法 时间复杂度：排序的话算作$O(Klog{K})$,最外层的 for 循环，所以就是 $O(nKlog{K})</description>
    </item>
    
    <item>
      <title>[Lc]38外观数列</title>
      <link>https://chrishrz.github.io/post/lc38%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</link>
      <pubDate>Thu, 30 Apr 2020 21:11:40 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc38%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</guid>
      <description>题目 题解 时间复杂度$O(N*M)$ 空间复杂度$O(M_{end}+M_{end-1}) class Solution { public: string countAndSay(int n) { if(n == 0) return &amp;quot;&amp;quot;; string res = &amp;quot;1&amp;quo</description>
    </item>
    
    <item>
      <title>[Lc]1254统计封闭岛屿的数目</title>
      <link>https://chrishrz.github.io/post/lc1254%E7%BB%9F%E8%AE%A1%E5%B0%81%E9%97%AD%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Tue, 28 Apr 2020 11:49:31 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc1254%E7%BB%9F%E8%AE%A1%E5%B0%81%E9%97%AD%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%95%B0%E7%9B%AE/</guid>
      <description>题目 题解 1. DFS 时间复杂度$O(MN)$ 空间复杂度$O(1)$ class Solution { public: int dfs(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid, int row, int column){ int rows = grid.size(); int columns = grid[0].size();//计算行列数 if(row</description>
    </item>
    
    <item>
      <title>[Lc]200岛屿数量</title>
      <link>https://chrishrz.github.io/post/lc200%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</link>
      <pubDate>Mon, 27 Apr 2020 17:05:33 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc200%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</guid>
      <description>题目 题解 1. DFS 时间复杂度$O(N*M)$ 空间复杂度$O(N*M)$（最坏情况） class Solution { public: void dfs(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid, int row, int column){ int rows = grid.size(); int columns = grid[0].size()</description>
    </item>
    
    <item>
      <title>[Lc]面试题40最小的k个数</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9840%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Mon, 27 Apr 2020 15:32:13 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9840%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</guid>
      <description>题目 题解 1. 堆法 时间复杂度：$O(n\log k)$，其中 nn 是数组 arr 的长度。由于大根堆实时维护前 k 小值，所以插入删除都是 $O(\log k)$ 的时间复杂度，最坏情</description>
    </item>
    
    <item>
      <title>[Lc]84柱状图中最大的矩形</title>
      <link>https://chrishrz.github.io/post/lc84%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/</link>
      <pubDate>Sun, 26 Apr 2020 13:23:35 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc84%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/</guid>
      <description>题目 题解 1. 双数组法 时间复杂度$O(N)$ 空间复杂度$O(N)$ class Solution { public: int largestRectangleArea(vector&amp;lt;int&amp;gt;&amp;amp; heights) {//多种方法，可以暴力搜索，但会超时，这里用时间复杂度较低的方</description>
    </item>
    
    <item>
      <title>[Lc]28实现strStr()</title>
      <link>https://chrishrz.github.io/post/lc28%E5%AE%9E%E7%8E%B0strstr/</link>
      <pubDate>Fri, 24 Apr 2020 21:26:38 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc28%E5%AE%9E%E7%8E%B0strstr/</guid>
      <description>题目 题解 这道题说是简单题结果花了我两天，BF算法的确简单，但是其他的字符串匹配算法真的太复杂了。。。 1. 正则表达式 这个在leetcode上超时</description>
    </item>
    
    <item>
      <title>十大排序算法的数组和链表实现</title>
      <link>https://chrishrz.github.io/post/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 22 Apr 2020 16:40:07 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/</guid>
      <description>数组排序在牛客,进行测试；链表排序在leetcode进行测试。 链表定义： Definition for singly-linked list. struct ListNode { int val; ListNode *next; ListNode(int x) : val(x), next(NULL) {} }; 概述 相关概念 稳定：如果a原本在b</description>
    </item>
    
    <item>
      <title>[Lc]22括号生成</title>
      <link>https://chrishrz.github.io/post/lc22%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</link>
      <pubDate>Tue, 21 Apr 2020 12:27:02 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc22%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</guid>
      <description>题目 题解 1.递归法 class Solution { vector&amp;lt;string&amp;gt; res;//在私有变量定义res在存结果， public: vector&amp;lt;string&amp;gt; generateParenthesis(int n) {//两种方法。1.递归 if(n==0) return res;//特殊情况 generateParenthesisDFS(n, n, &amp;quot;</description>
    </item>
    
    <item>
      <title>[Lc]20有效的括号</title>
      <link>https://chrishrz.github.io/post/lc20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Tue, 21 Apr 2020 11:49:21 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>题目 题解 时间复杂度$O(N)$ 空间复杂度$O(N)$ class Solution { public: bool isValid(string s) {//用栈 //不能挨个比较，因为有可能两个括号是交错的，用栈最合适 stack&amp;lt;char&amp;gt; par</description>
    </item>
    
    <item>
      <title>[Lc]17电话号码的字母组合</title>
      <link>https://chrishrz.github.io/post/lc17%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</link>
      <pubDate>Mon, 20 Apr 2020 20:25:18 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc17%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</guid>
      <description>题目 题解 时间复杂度$O(3^{N}+4^{M})$，N是有三个字母的数字数量，M是有4个字母的数字数量。 空间复杂度$O(3^{N}+4^{M</description>
    </item>
    
    <item>
      <title>[Lc]14最长公共前缀</title>
      <link>https://chrishrz.github.io/post/lc14%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</link>
      <pubDate>Sat, 18 Apr 2020 21:01:06 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc14%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</guid>
      <description>题目 题解 1. 遍历法 时间复杂度$O(S)$（最坏情况）。S是所有字符数量。 空间复杂度$O(1)$ class Solution { public: string longestCommonPrefix(vector&amp;lt;string&amp;gt;&amp;amp; strs) {//两种方法。1.遍历法 //这道</description>
    </item>
    
    <item>
      <title>Cpp数组初始化问题(待续）</title>
      <link>https://chrishrz.github.io/post/cpp%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 18 Apr 2020 12:47:18 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/cpp%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>数组 c++数组主要包括静态数组，动态数组，vector 1. 静态数组 未初始化的数组是随机数据，初始化方法有 int arr[1024] = {0}; //全部初始化为0 int arr[1024] = {1}; //</description>
    </item>
    
    <item>
      <title>牛客oj的输入输出</title>
      <link>https://chrishrz.github.io/post/%E7%89%9B%E5%AE%A2oj%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Wed, 15 Apr 2020 18:52:22 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E7%89%9B%E5%AE%A2oj%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Lc]67二进制求和</title>
      <link>https://chrishrz.github.io/post/lc67%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</link>
      <pubDate>Mon, 13 Apr 2020 22:36:11 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc67%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</guid>
      <description>题目 题解 按位相加即可，注意字符串与整型的转换，数字小的填0，注意进位 时间复杂度$O(max{(aLen + bLen)})$ 空间复杂度$O(max{(aLen</description>
    </item>
    
    <item>
      <title>[Lc]31下一个排列</title>
      <link>https://chrishrz.github.io/post/lc31%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</link>
      <pubDate>Sun, 12 Apr 2020 00:34:19 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc31%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</guid>
      <description>题目 题解 这道题不好理解，具体的题解见leetcode和Grandyang class Solution {//这道题不好理解，最好直接记方法 public: void nextPermutation(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(), i = n-2, j =</description>
    </item>
    
    <item>
      <title>[Lc]60第k个排列</title>
      <link>https://chrishrz.github.io/post/lc60%E7%AC%ACk%E4%B8%AA%E6%8E%92%E5%88%97/</link>
      <pubDate>Sat, 11 Apr 2020 22:55:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc60%E7%AC%ACk%E4%B8%AA%E6%8E%92%E5%88%97/</guid>
      <description>题目 题解 这道题直接找规律，比较难自己想通，该解法出自grandyang class Solution { public: string getPermutation(int n, int k) { string res;//定义res保存结果 string nums = &amp;quot;</description>
    </item>
    
    <item>
      <title>[Lc]69x的平方根</title>
      <link>https://chrishrz.github.io/post/lc69x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</link>
      <pubDate>Sat, 11 Apr 2020 22:55:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc69x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</guid>
      <description>题目 题解 1. 二分查找法 时间复杂度$o(log{N})$ 空间复杂度$O(1)$ class Solution { public: int mySqrt(int x) {//两个方法。1、二分查找法 if (x &amp;lt;= 1) return x;//0和</description>
    </item>
    
    <item>
      <title>[Lc]50Pow(x,n)</title>
      <link>https://chrishrz.github.io/post/lc50powxn/</link>
      <pubDate>Sat, 11 Apr 2020 22:04:52 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc50powxn/</guid>
      <description>题目 题解 快速幂是指x**2n == x**n + x**n，利用这一性质，不断的一半的数进行运算。有递归法和迭代法两种，注意要区分n为奇偶和n为负数的情况。</description>
    </item>
    
    <item>
      <title>[Lc]43字符串相乘</title>
      <link>https://chrishrz.github.io/post/lc43%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</link>
      <pubDate>Sat, 11 Apr 2020 13:36:02 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc43%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</guid>
      <description>题目 题解 时间复杂度$O(mn)$ 空间复杂度$O(m+n)$ class Solution { public: string multiply(string num1, string num2) { string res = &amp;quot;&amp;quot;;//初始化结果res int len1 = num1.size(), len2</description>
    </item>
    
    <item>
      <title>面经总结</title>
      <link>https://chrishrz.github.io/post/%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 11 Apr 2020 12:06:16 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</guid>
      <description>记录最近参加的面试的题目 腾讯春招实习提前批（客户端开发） 一面 二叉树的最大直径，编程题 链表的排序，要求时间复杂度$O(Nlog(N))$,空间</description>
    </item>
    
    <item>
      <title>[Lc]29两数相除</title>
      <link>https://chrishrz.github.io/post/lc29%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</link>
      <pubDate>Fri, 10 Apr 2020 22:46:20 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc29%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</guid>
      <description>题目 题解 这道题太恶心了，溢出搞得我头疼，先记录一个答案，来自这里,作者：cglin-2 这道题目要求不使用乘法、除法和 mod 运算符，且假设环境只能</description>
    </item>
    
    <item>
      <title>[Lc]12整数转罗马数字</title>
      <link>https://chrishrz.github.io/post/lc12%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 10 Apr 2020 00:13:43 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc12%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</guid>
      <description>题目 题解 1. 分类法 每个数量级可以分为4类，1~3，4，5~8，9。因此就使用每个数量级取商然后选择合适的类别进行表达，余数进行下一个数量级商的</description>
    </item>
    
    <item>
      <title>[Lc]222完全二叉树的节点个数</title>
      <link>https://chrishrz.github.io/post/lc222%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Thu, 09 Apr 2020 11:03:58 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc222%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 class Solution { public: int countNodes(TreeNode* root) {//1.递归直接统计节点数 return root? 1+countNodes(root-&amp;gt;left)+countNodes(root-&amp;gt;right) : 0; } }; 2. 利用</description>
    </item>
    
    <item>
      <title>[Lc]226翻转二叉树</title>
      <link>https://chrishrz.github.io/post/lc226%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Wed, 08 Apr 2020 22:48:38 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc226%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 class Solution {//两种方法。1、递归法 public: TreeNode* invertTree(TreeNode* root) { if(!root) return nullptr;/</description>
    </item>
    
    <item>
      <title>[Lc]199二叉树的右视图</title>
      <link>https://chrishrz.github.io/post/lc199%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Wed, 08 Apr 2020 22:14:18 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc199%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; //本题借鉴#102层次遍历 class Solution { public: vector&amp;lt;int&amp;gt; rightSideView(TreeNode* root) { vector&amp;lt;int&amp;gt; res; if(!root) return res; queue&amp;lt;TreeNode*&amp;gt; q{{root}}; while(!q.empty()){ res.p</description>
    </item>
    
    <item>
      <title>[Lc]173二叉搜索树迭代器</title>
      <link>https://chrishrz.github.io/post/lc173%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Wed, 08 Apr 2020 18:20:18 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc173%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; //这道题就是写一个中序遍历，因为题目提到是搜索二叉树 class BSTIterator { stack&amp;lt;TreeNode*&amp;gt; s;//</description>
    </item>
    
    <item>
      <title>[Lc]129求根到叶子节点数字之和</title>
      <link>https://chrishrz.github.io/post/lc129%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 08 Apr 2020 13:24:46 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc129%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1.递归法 class Solution { public: int sumNumbers(TreeNode* root) {//两种方法。1.递归法 return DFSsunNum</description>
    </item>
    
    <item>
      <title>[Lc]117填充每个节点的下一个右侧节点指针II</title>
      <link>https://chrishrz.github.io/post/lc117%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88ii/</link>
      <pubDate>Wed, 08 Apr 2020 11:41:56 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc117%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88ii/</guid>
      <description>题目 题解 该题二叉树结构如下： // Definition for a Node. class Node { public: int val; Node* left; Node* right; Node* next; Node() : val(0), left(NULL), right(NULL), next(NULL) {} Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {} Node(int _val, Node* _left, Node* _right, Node* _next) : val(_val), left(_left), right(_right), next(_next) {} }; 1.递归法 //和#</description>
    </item>
    
    <item>
      <title>[Lc]116填充每个节点的下一个右侧节点指针</title>
      <link>https://chrishrz.github.io/post/lc116%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88/</link>
      <pubDate>Tue, 07 Apr 2020 22:15:10 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc116%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88/</guid>
      <description>题目 题解 该题二叉树结构如下： // Definition for a Node. class Node { public: int val; Node* left; Node* right; Node* next; Node() : val(0), left(NULL), right(NULL), next(NULL) {} Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {} Node(int _val, Node* _left, Node* _right, Node* _next) : val(_val), left(_left), right(_right), next(_next) {} }; 1. 递归法 //这道题</description>
    </item>
    
    <item>
      <title>[Lc]114二叉树展开为链表</title>
      <link>https://chrishrz.github.io/post/lc114%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 07 Apr 2020 20:12:38 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc114%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 先序递归法 //本题的顺序可以看出是先序遍历。 class Solution {//两种方法。1、</description>
    </item>
    
    <item>
      <title>[转载]计算机考研大纲2019</title>
      <link>https://chrishrz.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%A7%E7%BA%B22019/</link>
      <pubDate>Sat, 28 Mar 2020 17:46:39 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E5%A4%A7%E7%BA%B22019/</guid>
      <description>2019年计算机408的考试大纲。 转自https://kaoyan.eol.cn/nnews/201809/t20180915_162519</description>
    </item>
    
    <item>
      <title>计算机网络学习笔记（待续。。。）</title>
      <link>https://chrishrz.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 28 Mar 2020 17:33:57 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>这个主要来自谢希仁的《计算机网络》和网络课程，先记重点。 部分图和概念摘自菜鸟教程,侵删。 菜鸟教程的原文链接是这个:http://www.cn</description>
    </item>
    
    <item>
      <title>[Lc]113路径总和2</title>
      <link>https://chrishrz.github.io/post/lc113%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C2/</link>
      <pubDate>Fri, 27 Mar 2020 22:34:03 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc113%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C2/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 时间复杂度：$O(N)$ 空间复杂度：？？需要额外空间。 //#1</description>
    </item>
    
    <item>
      <title>阿勒泰之春</title>
      <link>https://chrishrz.github.io/post/%E9%98%BF%E5%8B%92%E6%B3%B0%E4%B9%8B%E6%98%A5/</link>
      <pubDate>Sun, 22 Mar 2020 16:57:16 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E9%98%BF%E5%8B%92%E6%B3%B0%E4%B9%8B%E6%98%A5/</guid>
      <description>阿勒泰市北部为阿尔泰山地，南部为额尔齐斯河支流克兰河流域平原。 阿勒泰市属温带半干旱气候。四季分明，日照充足。冬长严寒，夏季温热，春秋短暂。1</description>
    </item>
    
    <item>
      <title>[Lc]112路径总和</title>
      <link>https://chrishrz.github.io/post/lc112%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</link>
      <pubDate>Fri, 20 Mar 2020 20:06:36 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc112%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 时间复杂度: 最坏情况$O(N)$ 空间复杂度: 最坏情况$O(N)</description>
    </item>
    
    <item>
      <title>[Lc]111二叉树的最小深度</title>
      <link>https://chrishrz.github.io/post/lc111%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Wed, 18 Mar 2020 17:10:27 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc111%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 时间复杂度: $O(N)$ 空间复杂度: 最坏情况下，整棵树是非平衡的，例如每</description>
    </item>
    
    <item>
      <title>[Lc]110平衡二叉树</title>
      <link>https://chrishrz.github.io/post/lc110%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 17 Mar 2020 16:32:45 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc110%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 时间复杂度: $O(n\log n)$ 空间复杂度: $O(n)$ class Solution { public: bool isBalanced(TreeNode* root) {//两种方法。1</description>
    </item>
    
    <item>
      <title>[Lc]107二叉树的层次遍历2</title>
      <link>https://chrishrz.github.io/post/lc174%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%862/</link>
      <pubDate>Tue, 17 Mar 2020 14:01:58 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc174%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%862/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 递归法有两种思路,一种直接翻转最终数组,一种在插入时就改变顺序</description>
    </item>
    
    <item>
      <title>[Lc]104二叉树的最大深度</title>
      <link>https://chrishrz.github.io/post/lc104%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Tue, 17 Mar 2020 13:12:19 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc104%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 时间复杂度: $O(N)$ 空间复杂度: $O(N)$ class Solution {//这个题就是遍历然后存最大</description>
    </item>
    
    <item>
      <title>[Lc]103二叉树的锯齿层次遍历</title>
      <link>https://chrishrz.github.io/post/lc103%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</link>
      <pubDate>Tue, 17 Mar 2020 11:48:54 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc103%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1.迭代法 class Solution {//和#102类似，有所改变，有迭代法和递归法两种方法</description>
    </item>
    
    <item>
      <title>[转载]在hugo中使用mathjax</title>
      <link>https://chrishrz.github.io/post/%E8%BD%AC%E8%BD%BD%E5%9C%A8hugo%E4%B8%AD%E4%BD%BF%E7%94%A8mathjax/</link>
      <pubDate>Mon, 16 Mar 2020 19:47:24 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E8%BD%AC%E8%BD%BD%E5%9C%A8hugo%E4%B8%AD%E4%BD%BF%E7%94%A8mathjax/</guid>
      <description>在Hugo中使用MathJax 在博客中写公式中想直接使用latex,找了一圈发现hugo本身是不支持的,查阅到匿蟒前辈写的一篇博客,详细介绍</description>
    </item>
    
    <item>
      <title>[Lc]102二叉树的层次遍历</title>
      <link>https://chrishrz.github.io/post/lc102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sun, 15 Mar 2020 15:03:26 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</guid>
      <description>题解 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 队列迭代法 class Solution {//两种方法。1、队列迭代法。 public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; levelOrder(TreeNode* root) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; if(!root) return res; /</description>
    </item>
    
    <item>
      <title>[Lc]101对称二叉树</title>
      <link>https://chrishrz.github.io/post/lc101%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sat, 14 Mar 2020 19:54:18 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc101%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>题解 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 递归法 class Solution {//三种方法。1、递归法。有点像#100 public: bool isSymmetric(TreeNode* root) { if(!root) return t</description>
    </item>
    
    <item>
      <title>[Lc]100相同的树</title>
      <link>https://chrishrz.github.io/post/lc100%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/</link>
      <pubDate>Sat, 14 Mar 2020 19:27:58 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc100%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/</guid>
      <description>题目 题解 这道题就是遍历。这里写一个先序遍历，其他遍历方式见相应例题。 二叉树的遍历包括DFS(深度优先搜索)的先序遍历、中序遍历、后序遍历。 还</description>
    </item>
    
    <item>
      <title>[Lc]98验证二叉搜索树</title>
      <link>https://chrishrz.github.io/post/lc98%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Sat, 14 Mar 2020 13:53:22 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc98%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>题目 题解 TreeNode的定义： /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ 1. 直接递归法 class Solution {//三种方法。1、直接递归</description>
    </item>
    
    <item>
      <title>[Lc]95不同的二叉搜索树2</title>
      <link>https://chrishrz.github.io/post/lc95%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%912/</link>
      <pubDate>Sat, 14 Mar 2020 00:59:26 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc95%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%912/</guid>
      <description>题目 题解 定义二叉树: //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; 1. 递归法 class Solution {//#96的升级版。两种方法。1、递归 public: vector&amp;lt;TreeNode*&amp;gt; generateTrees(int n) { vector&amp;lt;TreeNode*&amp;gt; ans; if(n==0) return a</description>
    </item>
    
    <item>
      <title>[转载]在hugo中添加mermaid支持</title>
      <link>https://chrishrz.github.io/post/%E8%BD%AC%E8%BD%BD%E5%9C%A8hugo%E4%B8%AD%E6%B7%BB%E5%8A%A0mermaid%E6%94%AF%E6%8C%81/</link>
      <pubDate>Fri, 13 Mar 2020 17:39:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E8%BD%AC%E8%BD%BD%E5%9C%A8hugo%E4%B8%AD%E6%B7%BB%E5%8A%A0mermaid%E6%94%AF%E6%8C%81/</guid>
      <description>在markdown中拓展mermaid 前面用有道云笔记的markdown功能，发现他画流程图非常好用。就想把这个功能加入到自己的blog中。</description>
    </item>
    
    <item>
      <title>[Lc]96不同的二叉搜索树</title>
      <link>https://chrishrz.github.io/post/lc96%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Fri, 13 Mar 2020 12:26:13 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc96%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>题目 题解 这道题是#95的简化版。#95要求写出所有的二叉搜索树，这道题只要求写出二叉搜索树的个数，因此要简单一点，其结题思路与卡塔兰数有关。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;哈希表unordered_map的常见方法小结</title>
      <link>https://chrishrz.github.io/post/c&#43;&#43;%E5%93%88%E5%B8%8C%E8%A1%A8unordered_map%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Thu, 12 Mar 2020 22:34:40 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/c&#43;&#43;%E5%93%88%E5%B8%8C%E8%A1%A8unordered_map%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/</guid>
      <description>unordered_map的常见用法 unordered_map &amp;lt;string,int&amp;gt; res; res.empty();//判断是否为空 res.size();//计算res的大小 res[&amp;quot;{key}&amp;quot;]; res.at(</description>
    </item>
    
    <item>
      <title>设置vscode的终端为cmder</title>
      <link>https://chrishrz.github.io/post/%E8%AE%BE%E7%BD%AEvscode%E7%9A%84%E7%BB%88%E7%AB%AF%E4%B8%BAcmder/</link>
      <pubDate>Thu, 12 Mar 2020 13:51:37 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/%E8%AE%BE%E7%BD%AEvscode%E7%9A%84%E7%BB%88%E7%AB%AF%E4%B8%BAcmder/</guid>
      <description>流程 1. 进入setting(ctrl+shift+p) 2. 依次进入User-&amp;gt;Features-&amp;gt;Terminal 3. 进入上图所示的E</description>
    </item>
    
    <item>
      <title>[Lc]94/144/145二叉树的三种遍历</title>
      <link>https://chrishrz.github.io/post/lc94_144_145%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86/</link>
      <pubDate>Mon, 09 Mar 2020 11:28:56 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc94_144_145%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86/</guid>
      <description>题目 二叉树的遍历 简单地理解，满足以下两个条件的树就是二叉树： 本身是有序树； 树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2； 下图即一颗</description>
    </item>
    
    <item>
      <title>序</title>
      <link>https://chrishrz.github.io/post/first/</link>
      <pubDate>Mon, 09 Mar 2020 11:28:56 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/first/</guid>
      <description>ChrisHRZ的第一篇个人博客 写在前面 折腾了一天，终于搭建出来个人博客的雏形，过程还是挺有意思的。也算有了一片自己的领地。今天就这样了，后</description>
    </item>
    
  </channel>
</rss>