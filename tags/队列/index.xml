<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>队列 on Focus-ChrisHRZ&#39;s blog</title>
    <link>https://chrishrz.github.io/tags/%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 队列 on Focus-ChrisHRZ&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Jul 2020 17:48:19 +0800</lastBuildDate>
    
	<atom:link href="https://chrishrz.github.io/tags/%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Lc]239滑动窗口最大值</title>
      <link>https://chrishrz.github.io/post/lc239%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Sat, 11 Jul 2020 17:48:19 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc239%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>题目 题解 看题解有三个方法。最重要的是滑动窗口法，记录一下，其他的还有暴力法（超时）和动态规划法（没看懂，有时间再看） 1. 滑动窗口+单调递减队列</description>
    </item>
    
    <item>
      <title>[Lc]面试题59_I滑动窗口的最大值</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9859_i%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Sat, 11 Jul 2020 17:42:23 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9859_i%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>题目 题解 看题解有三个方法。最重要的是滑动窗口法，记录一下，其他的还有暴力法（超时）和动态规划法（没看懂，有时间再看） 1. 滑动窗口+单调递减队列</description>
    </item>
    
    <item>
      <title>[Lc]面试题59_II队列的最大值</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9859_ii%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Fri, 10 Jul 2020 16:07:07 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9859_ii%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>题目 //Your MaxQueue object will be instantiated and called as such: MaxQueue* obj = new MaxQueue(); int param_1 = obj-&amp;gt;max_value(); obj-&amp;gt;push_back(value); int param_3 = obj-&amp;gt;pop_front(); 题解 添加一个辅助的递减双端队列，用来保存对应队列中该数的最大值 push时： 当新添加的数小</description>
    </item>
    
    <item>
      <title>[Lc]面试题33二叉搜索树的后序遍历序列</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9833%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</link>
      <pubDate>Tue, 19 May 2020 12:13:21 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9833%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 分治递归法 二叉搜索树的性质见这里。后序遍历的顺序是左-&amp;gt;根-&amp;</description>
    </item>
    
    <item>
      <title>[Lc]面试题32_III从上到下打印二叉树III</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9832_iii%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91iii/</link>
      <pubDate>Mon, 18 May 2020 19:33:01 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9832_iii%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91iii/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 队列迭代法 比上一题再复杂一点，要区分奇偶行，偶数行从后面加数，奇数行</description>
    </item>
    
    <item>
      <title>[Lc]面试题32_II从上到下打印二叉树II</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9832_ii%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91ii/</link>
      <pubDate>Mon, 18 May 2020 19:24:27 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9832_ii%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91ii/</guid>
      <description>题目 题解 二叉树结构如下： //Definition for a binary tree node. struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; 1. 队列迭代法 比上一题稍微复杂一点，不同层次要分开存，因此这里要多一个循</description>
    </item>
    
    <item>
      <title>[Lc]面试题32_I从上到下打印二叉树</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9832_i%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Mon, 18 May 2020 19:01:09 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9832_i%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>题目 题解 其实就是二叉树的层次遍历，比102简单。因为这道题不分层因此用dfs不好做，还是用bfs好 时间复杂度$O(n)$ 空间复杂度$O(n)</description>
    </item>
    
    <item>
      <title>[Lc]面试题09用两个栈实现队列</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9809%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 10 May 2020 20:54:36 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9809%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid>
      <description>题目 题解 腾讯的客户端开发就是面的这个。。。，当时还想了半天幸苦想出来了，可惜还是凉 //Your CQueue object will be instantiated and called as such: CQueue* obj = new CQueue(); bj-&amp;gt;appendTail(value); int param_2 = obj-&amp;gt;deleteHead(); 1. 快存慢取 这个方法</description>
    </item>
    
  </channel>
</rss>