<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数学 on Focus-ChrisHRZ&#39;s blog</title>
    <link>https://chrishrz.github.io/tags/%E6%95%B0%E5%AD%A6/</link>
    <description>Recent content in 数学 on Focus-ChrisHRZ&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Jun 2020 17:32:36 +0800</lastBuildDate>
    
	<atom:link href="https://chrishrz.github.io/tags/%E6%95%B0%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Lc]263丑数</title>
      <link>https://chrishrz.github.io/post/lc263%E4%B8%91%E6%95%B0/</link>
      <pubDate>Fri, 12 Jun 2020 17:32:36 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc263%E4%B8%91%E6%95%B0/</guid>
      <description>题目 题解 除就完事了，使劲除，除到原始丑数都没法除 时间复杂度$O(n)$，不太确定 空间复杂度$O(1)$ class Solution {//一个方法。1.因式分解 public: bool isUgly(int</description>
    </item>
    
    <item>
      <title>[Lc]264丑数II</title>
      <link>https://chrishrz.github.io/post/lc264%E4%B8%91%E6%95%B0ii/</link>
      <pubDate>Fri, 12 Jun 2020 17:26:30 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc264%E4%B8%91%E6%95%B0ii/</guid>
      <description>题目 题解 两个方法 1. 动态规划 就是找到丑数的生成规律，然后递推不断地生成下一个丑数，直到生成第n个丑数，需要使用三个指针，分析见注释 时间复杂度$</description>
    </item>
    
    <item>
      <title>[Lc]面试题49丑数</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9849%E4%B8%91%E6%95%B0/</link>
      <pubDate>Fri, 12 Jun 2020 16:50:55 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9849%E4%B8%91%E6%95%B0/</guid>
      <description>题目 题解 两个方法 1. 动态规划 就是找到丑数的生成规律，然后递推不断地生成下一个丑数，直到生成第n个丑数，需要使用三个指针，分析见注释 时间复杂度$</description>
    </item>
    
    <item>
      <title>[Lc]面试题46把数字翻译成字符串</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9846%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 11 Jun 2020 22:07:48 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9846%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>题目 题解 这道题和91题很像，区别在于这道题从0开始编码，就不用讨论当前数为0的情况，因此更简单，可以转化为字符串使用91题的方法进行解决，这</description>
    </item>
    
    <item>
      <title>[Lc]面试题45把数组排成最小的数</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9845%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</link>
      <pubDate>Thu, 11 Jun 2020 15:11:58 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9845%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</guid>
      <description>题目 题解 这道题实际上是字符串排序，需要重新定义字符串大小的定义 ，具体的排序方法见注释 时间复杂度$O(nlog{n})$ 空间复杂度$O(n)$</description>
    </item>
    
    <item>
      <title>[Lc]400第N个数字</title>
      <link>https://chrishrz.github.io/post/lc400%E7%AC%ACn%E4%B8%AA%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 10 Jun 2020 18:08:08 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc400%E7%AC%ACn%E4%B8%AA%E6%95%B0%E5%AD%97/</guid>
      <description>题目 题解 这道题主要是找规律，图示可以看这里 先剔除掉0 1~9， 有9*1=9个数字，占9*1*1=9个数位 10~99， 有9*10=90个数字，占</description>
    </item>
    
    <item>
      <title>[Lc]面试题44数字序列中某一位的数字</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9844%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 10 Jun 2020 17:49:09 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9844%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>题目 题解 这道题主要是找规律，图示可以看这里 先剔除掉0 1~9， 有9*1=9个数字，占9*1*1=9个数位 10~99， 有9*10=90个数字，占</description>
    </item>
    
    <item>
      <title>[Lc]233数字1的个数</title>
      <link>https://chrishrz.github.io/post/lc233%E6%95%B0%E5%AD%971%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Wed, 10 Jun 2020 17:39:53 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc233%E6%95%B0%E5%AD%971%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description>题目 题解 这题可以用暴力法，即挨个数字统计，必定超时 时间复杂度：$O(n*log_{10}(n))$ 从 1 遍历到 n。 每次遍历中，我们把整数转成字</description>
    </item>
    
    <item>
      <title>[Lc]面试题43整数中1出现的次数</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9843%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Wed, 10 Jun 2020 12:27:15 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9843%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</guid>
      <description>题目 题解 这题可以用暴力法，即挨个数字统计，必定超时 时间复杂度：$O(n*log_{10}(n))$ 从 1 遍历到 n。 每次遍历中，我们把整数转成字</description>
    </item>
    
    <item>
      <title>[Lc]169多数元素</title>
      <link>https://chrishrz.github.io/post/lc169%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</link>
      <pubDate>Wed, 20 May 2020 21:36:39 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc169%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</guid>
      <description>题目 题解 1. 排序取中法 时间复杂度$O(nlog{n})$，主要是排序耗费的 空间复杂度$O(1)$ class Solution {//三种方法，这是1.排序后取中间数 //</description>
    </item>
    
    <item>
      <title>[Lc]面试题17打印从1到最大的n位数</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9817%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Wed, 13 May 2020 16:08:43 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9817%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</guid>
      <description>题目 题解 这道题如果不考虑大数的话很简单，但是原书主要是解决输出大数的问题，因此大数也要加以练习（leetcode不考虑大树也能通过） 1. 普通解</description>
    </item>
    
    <item>
      <title>[Lc]面试题16数值的整数次方</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9816%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</link>
      <pubDate>Wed, 13 May 2020 12:58:28 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9816%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</guid>
      <description>题目 题解 这道题在leetcode上用挨个累乘的方法会超时因此需要用快速幂法 快速幂是指x**2n == x**n + x**n，利用这一性质，不断的一半的数进</description>
    </item>
    
    <item>
      <title>[Lc]面试题10_II青蛙跳台阶问题</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9810_ii%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 May 2020 12:13:41 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9810_ii%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</guid>
      <description>题目 题解 这题与70题一样，详见70题题解，因为要取模，因此通项公式法无法通过，递推公式法也太慢通过不了，其分析详见70题题解，这里贴一个递推</description>
    </item>
    
    <item>
      <title>[Lc]509斐波那契数</title>
      <link>https://chrishrz.github.io/post/lc509%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</link>
      <pubDate>Mon, 11 May 2020 11:23:15 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc509%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</guid>
      <description>题目 题解 这题和爬楼梯是一样的，这题与剑指offer10一样，三种方法 1. 递归 这个方法最慢，因为有大量的重复运算，写法最简单，就不写了 时间复杂度</description>
    </item>
    
    <item>
      <title>[Lc]面试题10_I斐波那契数列</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9810_i%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</link>
      <pubDate>Mon, 11 May 2020 11:20:02 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9810_i%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</guid>
      <description>题目 题解 这题与[lc]509一样，区别在于结果需要取余，而对于最终结果取余和对于每一位取余再计算下一个数字答案是一样的。具体分析见(http</description>
    </item>
    
    <item>
      <title>[Lc]70爬楼梯</title>
      <link>https://chrishrz.github.io/post/lc70%E7%88%AC%E6%A5%BC%E6%A2%AF/</link>
      <pubDate>Sat, 09 May 2020 13:27:32 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc70%E7%88%AC%E6%A5%BC%E6%A2%AF/</guid>
      <description>题目 题解 1. 动态规划（斐波那契数列递推公式） 其实就是斐波那契数列，可以用递推公式和通项公式求解 递推相当于动态规划，但是只和前两个数有关，所以不</description>
    </item>
    
    <item>
      <title>[Lc]204计数质数</title>
      <link>https://chrishrz.github.io/post/lc204%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/</link>
      <pubDate>Sat, 09 May 2020 11:34:43 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc204%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/</guid>
      <description>题目 题解 1. 暴力法 直接用暴力法会超时，时间复杂度$O(n^{2})$，因此使用暴力法要进行优化，即isPrime()函数只用遍历到sqrt(N</description>
    </item>
    
    <item>
      <title>[Lc]172阶乘后的零</title>
      <link>https://chrishrz.github.io/post/lc172%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</link>
      <pubDate>Fri, 08 May 2020 17:33:58 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc172%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</guid>
      <description>题目 题解 这道题代码不难，关键是数学归纳。 如果把阶乘算出来再求0一定会超时，时间复杂度$O(n)$，pass。 这道题的关键是找2和5的个数，只</description>
    </item>
    
    <item>
      <title>[Lc]171Excel表列序号</title>
      <link>https://chrishrz.github.io/post/lc171excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/</link>
      <pubDate>Fri, 08 May 2020 17:08:51 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc171excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/</guid>
      <description>题目 题解 和168正好相反嘛 这题就简单多了，挨个取字母变成数字就可以了，注意有： 每次是乘26 每次要+1，和168的原因一样，这个是伪26进制，</description>
    </item>
    
    <item>
      <title>[Lc]168Excel表列名称</title>
      <link>https://chrishrz.github.io/post/lc168excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</link>
      <pubDate>Fri, 08 May 2020 16:07:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc168excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</guid>
      <description>题目 题解 和171相反的一个题嘛，这个稍微难一点。 这道题就是十进制转26进制，但是有一些需要注意的问题 首先不能从前往后插入数字，即先放最大位，</description>
    </item>
    
    <item>
      <title>[Lc]166分数到小数</title>
      <link>https://chrishrz.github.io/post/lc166%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/</link>
      <pubDate>Fri, 08 May 2020 12:30:44 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc166%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/</guid>
      <description>题目 题解 这道题其实就是模拟笔算除法的过程，挨个位产生商，主要判断是否除尽或者产生了循环。 class Solution { public: string fractionToDecimal(int numerator, int denominator) { string res; if(numerator==0) return &amp;quot;0&amp;quot;; //用异或判断是否为负</description>
    </item>
    
    <item>
      <title>[Lc]67二进制求和</title>
      <link>https://chrishrz.github.io/post/lc67%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</link>
      <pubDate>Mon, 13 Apr 2020 22:36:11 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc67%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</guid>
      <description>题目 题解 按位相加即可，注意字符串与整型的转换，数字小的填0，注意进位 时间复杂度$O(max{(aLen + bLen)})$ 空间复杂度$O(max{(aLen</description>
    </item>
    
    <item>
      <title>[Lc]31下一个排列</title>
      <link>https://chrishrz.github.io/post/lc31%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</link>
      <pubDate>Sun, 12 Apr 2020 00:34:19 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc31%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</guid>
      <description>题目 题解 这道题不好理解，具体的题解见leetcode和Grandyang class Solution {//这道题不好理解，最好直接记方法 public: void nextPermutation(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(), i = n-2, j =</description>
    </item>
    
    <item>
      <title>[Lc]60第k个排列</title>
      <link>https://chrishrz.github.io/post/lc60%E7%AC%ACk%E4%B8%AA%E6%8E%92%E5%88%97/</link>
      <pubDate>Sat, 11 Apr 2020 22:55:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc60%E7%AC%ACk%E4%B8%AA%E6%8E%92%E5%88%97/</guid>
      <description>题目 题解 这道题直接找规律，比较难自己想通，该解法出自grandyang class Solution { public: string getPermutation(int n, int k) { string res;//定义res保存结果 string nums = &amp;quot;</description>
    </item>
    
    <item>
      <title>[Lc]69x的平方根</title>
      <link>https://chrishrz.github.io/post/lc69x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</link>
      <pubDate>Sat, 11 Apr 2020 22:55:04 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc69x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</guid>
      <description>题目 题解 1. 二分查找法 时间复杂度$o(log{N})$ 空间复杂度$O(1)$ class Solution { public: int mySqrt(int x) {//两个方法。1、二分查找法 if (x &amp;lt;= 1) return x;//0和</description>
    </item>
    
    <item>
      <title>[Lc]50Pow(x,n)</title>
      <link>https://chrishrz.github.io/post/lc50powxn/</link>
      <pubDate>Sat, 11 Apr 2020 22:04:52 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc50powxn/</guid>
      <description>题目 题解 快速幂是指x**2n == x**n + x**n，利用这一性质，不断的一半的数进行运算。有递归法和迭代法两种，注意要区分n为奇偶和n为负数的情况。</description>
    </item>
    
    <item>
      <title>[Lc]43字符串相乘</title>
      <link>https://chrishrz.github.io/post/lc43%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</link>
      <pubDate>Sat, 11 Apr 2020 13:36:02 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc43%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</guid>
      <description>题目 题解 时间复杂度$O(mn)$ 空间复杂度$O(m+n)$ class Solution { public: string multiply(string num1, string num2) { string res = &amp;quot;&amp;quot;;//初始化结果res int len1 = num1.size(), len2</description>
    </item>
    
    <item>
      <title>[Lc]29两数相除</title>
      <link>https://chrishrz.github.io/post/lc29%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</link>
      <pubDate>Fri, 10 Apr 2020 22:46:20 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc29%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</guid>
      <description>题目 题解 这道题太恶心了，溢出搞得我头疼，先记录一个答案，来自这里,作者：cglin-2 这道题目要求不使用乘法、除法和 mod 运算符，且假设环境只能</description>
    </item>
    
    <item>
      <title>[Lc]12整数转罗马数字</title>
      <link>https://chrishrz.github.io/post/lc12%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 10 Apr 2020 00:13:43 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc12%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</guid>
      <description>题目 题解 1. 分类法 每个数量级可以分为4类，1~3，4，5~8，9。因此就使用每个数量级取商然后选择合适的类别进行表达，余数进行下一个数量级商的</description>
    </item>
    
  </channel>
</rss>