<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DP on Focus-ChrisHRZ&#39;s blog</title>
    <link>https://chrishrz.github.io/tags/dp/</link>
    <description>Recent content in DP on Focus-ChrisHRZ&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 May 2020 13:17:07 +0800</lastBuildDate>
    
	<atom:link href="https://chrishrz.github.io/tags/dp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Lc]面试题19正则表达式匹配</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9819%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Thu, 14 May 2020 13:17:07 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9819%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>题目 题解 1. 普通递归 class Solution { public: bool isMatch(string s, string p) { if(p.empty()) return s.empty();//若p为空，则s为空返回false。否则返回true //若s不为空且当前字符</description>
    </item>
    
    <item>
      <title>[Lc]10正则表达式匹配</title>
      <link>https://chrishrz.github.io/post/lc10%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Thu, 14 May 2020 13:13:40 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc10%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>题目 题解 1. 普通递归 class Solution { public: bool isMatch(string s, string p) { if(p.empty()) return s.empty();//若p为空，则s为空返回false。否则返回true //若s不为空且当前字符</description>
    </item>
    
    <item>
      <title>[Lc]面试题14_II剪绳子II</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9814_ii%E5%89%AA%E7%BB%B3%E5%AD%90ii/</link>
      <pubDate>Wed, 13 May 2020 11:26:05 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9814_ii%E5%89%AA%E7%BB%B3%E5%AD%90ii/</guid>
      <description>题目 题解 这题写的我不行了，其实这题思路很简单，就是c++取余太麻烦了，我想写一个自己的pow()函数，用clion跑的结果和oj还不一样，取</description>
    </item>
    
    <item>
      <title>[Lc]343整数拆分</title>
      <link>https://chrishrz.github.io/post/lc343%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/</link>
      <pubDate>Tue, 12 May 2020 17:51:35 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc343%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/</guid>
      <description>题目 题解 1. 普通DP 具体思路看注释。前面遇到一个问题，即循环里dp[i] = max(dp[i], max(j*(i-j), j*dp[i-j]));为什么不是dp[i], j*(i-j), dp[j]*dp[i-j] 这是因为在内循</description>
    </item>
    
    <item>
      <title>[Lc]面试题14_I剪绳子</title>
      <link>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9814_i%E5%89%AA%E7%BB%B3%E5%AD%90/</link>
      <pubDate>Tue, 12 May 2020 13:12:27 +0800</pubDate>
      
      <guid>https://chrishrz.github.io/post/lc%E9%9D%A2%E8%AF%95%E9%A2%9814_i%E5%89%AA%E7%BB%B3%E5%AD%90/</guid>
      <description>题目 题解 1. 普通DP 具体思路看注释。前面遇到一个问题，即循环里dp[i] = max(dp[i], max(j*(i-j), j*dp[i-j]));为什么不是dp[i], j*(i-j), dp[j]*dp[i-j] 这是因为在内循</description>
    </item>
    
  </channel>
</rss>